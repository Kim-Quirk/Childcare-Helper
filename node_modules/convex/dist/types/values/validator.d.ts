import { JSONValue, Id as GenericId } from "./value.js";
import { Expand } from "../type_utils.js";
/**
 * A validator for a Convex value.
 *
 * This should be constructed using the validator builder, {@link v}.
 *
 * This class encapsulates:
 * - The TypeScript type of this value.
 * - Whether this field should be optional if it's included in an object.
 * - The TypeScript type for the set of index field paths that can be used to
 * build indexes on this value.
 * - A JSON representation of the validator.
 * @public
 */
export declare class Validator<TypeScriptType, IsOptional extends boolean = false, FieldPaths extends string = never> {
    readonly type: TypeScriptType;
    readonly isOptional: IsOptional;
    readonly fieldPaths: FieldPaths;
    readonly _isValidator: undefined;
    readonly optional: boolean;
    readonly json: ValidatorJSON;
    constructor(json: ValidatorJSON, optional: boolean);
}
declare type ObjectFieldType = {
    fieldType: ValidatorJSON;
    optional: boolean;
};
declare type ValidatorJSON = {
    type: "null";
} | {
    type: "number";
} | {
    type: "bigint";
} | {
    type: "boolean";
} | {
    type: "string";
} | {
    type: "bytes";
} | {
    type: "any";
} | {
    type: "literal";
    value: JSONValue;
} | {
    type: "id";
    tableName: string;
} | {
    type: "array";
    value: ValidatorJSON;
} | {
    type: "set";
    value: ValidatorJSON;
} | {
    type: "map";
    keys: ValidatorJSON;
    values: ValidatorJSON;
} | {
    type: "object";
    value: Record<string, ObjectFieldType>;
} | {
    type: "union";
    value: ValidatorJSON[];
};
/**
 * The validator builder.
 *
 * This builder allows you to build validators for Convex values.
 *
 * Validators can be used in [schema definitions](https://docs.convex.dev/database/schemas)
 * and as input validators for Convex functions.
 * @public
 */
export declare const v: {
    id<TableName extends string>(tableName: TableName): Validator<GenericId<TableName>, false, never>;
    null(): Validator<null>;
    number(): Validator<number>;
    bigint(): Validator<bigint>;
    boolean(): Validator<boolean>;
    string(): Validator<string>;
    bytes(): Validator<ArrayBuffer>;
    literal<T extends string | number | bigint | boolean>(literal: T): Validator<T, false, never>;
    array<T_1>(values: Validator<T_1, false, any>): Validator<T_1[], false, never>;
    set<T_2>(values: Validator<T_2, false, any>): Validator<Set<T_2>, false, never>;
    map<K, V>(keys: Validator<K, false, any>, values: Validator<V, false, any>): Validator<Map<K, V>, false, never>;
    object<T_3 extends PropertyValidators>(schema: T_3): ObjectValidator<T_3>;
    union<T_4 extends [Validator<any, false, any>, Validator<any, false, any>, ...Validator<any, false, any>[]]>(...schemaTypes: T_4): Validator<T_4[number]["type"], false, T_4[number]["fieldPaths"]>;
    any(): Validator<any, false, string>;
    optional<T_5 extends Validator<any, false, any>>(inner: T_5): Validator<T_5["type"] | undefined, true, T_5["fieldPaths"]>;
};
/**
 * Validators for each property of an object.
 *
 * This is represented as an object mapping the property name to its
 * {@link Validator}.
 *
 * @public
 */
export declare type PropertyValidators = Record<string, Validator<any, any, any>>;
/**
 * Compute the type of an object from {@link PropertyValidators}.
 *
 * @public
 */
export declare type ObjectType<Validators extends PropertyValidators> = Expand<{
    [Property in OptionalKeys<Validators>]?: Validators[Property]["type"];
} & {
    [Property in RequiredKeys<Validators>]: Validators[Property]["type"];
}>;
/**
 * Calculate the type of a {@link Validator} for an object.
 *
 * This is used within the validator builder, {@link v}.
 */
export declare type ObjectValidator<Validators extends PropertyValidators> = Validator<ObjectType<Validators>, false, {
    [Property in keyof Validators]: JoinFieldPaths<Property & string, Validators[Property]["fieldPaths"]> | Property;
}[keyof Validators] & string>;
declare type OptionalKeys<PropertyValidators extends Record<string, Validator<any, any, any>>> = {
    [Property in keyof PropertyValidators]: PropertyValidators[Property]["isOptional"] extends true ? Property : never;
}[keyof PropertyValidators];
declare type RequiredKeys<PropertyValidators extends Record<string, Validator<any, any, any>>> = Exclude<keyof PropertyValidators, OptionalKeys<PropertyValidators>>;
/**
 * Join together two index field paths.
 *
 * This is used within the validator builder, {@link v}.
 * @public
 */
declare type JoinFieldPaths<Start extends string, End extends string> = `${Start}.${End}`;
/**
 * Extract a TypeScript type from a validator.
 *
 * Example usage:
 * ```ts
 * const objectSchema = v.object({
 *   property: v.string(),
 * });
 * type MyObject = Infer<typeof objectSchema>; // { property: string }
 * ```
 * @typeParam V - The type of a {@link Validator} constructed with {@link v}.
 *
 * @public
 */
export declare type Infer<V extends Validator<any, any, any>> = V["type"];
export {};
//# sourceMappingURL=validator.d.ts.map