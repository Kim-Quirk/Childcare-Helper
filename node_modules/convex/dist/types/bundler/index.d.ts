import esbuild from "esbuild";
import { Filesystem } from "./fs.js";
export { nodeFs, RecordingFs } from "./fs.js";
export type { Filesystem } from "./fs.js";
export declare const actionsDir = "actions";
export declare function walkDir(fs: Filesystem, dirPath: string): Generator<{
    isDir: boolean;
    path: string;
}, void, void>;
declare type ModuleEnvironment = "node" | "isolate";
export interface Bundle {
    path: string;
    source: string;
    sourceMap?: string;
    environment: ModuleEnvironment;
}
export declare class BundleError extends Error {
}
export declare function bundle(fs: Filesystem, dir: string, entryPoints: string[], generateSourceMaps: boolean, platform: esbuild.Platform, chunksFolder?: string): Promise<Bundle[]>;
export declare function bundleSchema(fs: Filesystem, dir: string): Promise<Bundle[]>;
export declare function entryPoints(fs: Filesystem, dir: string, verbose: boolean): Promise<string[]>;
export declare const useNodeDirectiveRegex: RegExp;
export declare function mustBeIsolate(relPath: string): boolean;
export declare function entryPointsByEnvironment(fs: Filesystem, dir: string, verbose: boolean): Promise<{
    isolate: string[];
    node: string[];
}>;
//# sourceMappingURL=index.d.ts.map