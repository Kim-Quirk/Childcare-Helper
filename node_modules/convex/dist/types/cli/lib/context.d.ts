import { Filesystem } from "../../bundler";
import { Ora } from "ora";
/**
 * How the error should be handled when running `npx convex dev`.
 *
 * "invalid filesystem data": The error was likely caused by a developer's local
 * file system (e.g. `tsc` fails due to a syntax error). The `convex dev`
 * command will then print out the error and wait for the file to change before
 * retrying.
 *
 * "transient": The error was some transient issue (e.g. a network
 * error). This will then cause a retry after an exponential backoff.
 *
 * "fatal": This error is truly permanent. Exit `npx convex dev` because the
 * developer will need to take a manual commandline action.
 */
export declare type ErrorType = "invalid filesystem data" | "transient" | "fatal";
export interface Context {
    fs: Filesystem;
    deprecationMessagePrinted: boolean;
    spinner: Ora | undefined;
    crash(exitCode: number, errorType?: ErrorType, err?: any): Promise<never>;
}
export declare const oneoffContext: Context;
export declare function logError(ctx: Context, message: string): void;
export declare function logWarning(ctx: Context, message: string): void;
export declare function logMessage(ctx: Context, ...logged: any): void;
export declare function showSpinner(ctx: Context, message: string): void;
export declare function changeSpinner(ctx: Context, message: string): void;
export declare function logFailure(ctx: Context, message: string): void;
export declare function logFinishedStep(ctx: Context, message: string): void;
export declare function stopSpinner(ctx: Context): void;
export declare function pauseSpinner(ctx: Context): void;
export declare function resumeSpinner(ctx: Context): void;
//# sourceMappingURL=context.d.ts.map