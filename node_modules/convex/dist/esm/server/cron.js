"use strict";
import { parseArgs } from "../common/index.js";
import { convexToJson } from "../values/index.js";
const DAYS_OF_WEEK = [
  "sunday",
  "monday",
  "tuesday",
  "wednesday",
  "thursday",
  "friday",
  "saturday"
];
export const cronJobsGeneric = () => new Crons();
function validatedDayOfMonth(n) {
  if (typeof n !== "number" || isNaN(n) || n < 1 || n > 31) {
    throw new Error("Day of month must be a number from 1 to 31");
  }
  return n;
}
function validatedDayOfWeek(s) {
  if (typeof s !== "string" || !DAYS_OF_WEEK.includes(s)) {
    throw new Error('Day of week must be a string like "monday".');
  }
  return s;
}
function validatedHourOfDay(n) {
  if (typeof n !== "number" || isNaN(n) || n < 0 || n > 23) {
    throw new Error("Hour of day must be a number from 0 to 23");
  }
  return n;
}
function validatedMinuteOfHour(n) {
  if (typeof n !== "number" || isNaN(n) || n < 0 || n > 59) {
    throw new Error("Minute of hour must be a number from 0 to 59");
  }
  return n;
}
function validatedCronString(s) {
  return s;
}
function validatedCronIdentifier(s) {
  if (!s.match(/^[a-zA-Z0-9_ '-]*$/)) {
    throw new Error(
      `Invalid cron identifier ${s}: use ASCII letters, numbers, spaces, underscores, dashes and apostrophes`
    );
  }
  return s;
}
export class Crons {
  constructor() {
    this.isCrons = true;
    this.crons = {};
  }
  schedule(cronIdentifier, schedule, name, args) {
    const cronArgs = parseArgs(args);
    validatedCronIdentifier(cronIdentifier);
    if (cronIdentifier in this.crons) {
      throw new Error(`Cron identifier registered twice: ${cronIdentifier}`);
    }
    this.crons[cronIdentifier] = {
      name,
      args: [convexToJson(cronArgs)],
      schedule
    };
  }
  interval(cronIdentifier, schedule, functionName, ...args) {
    const s = schedule;
    const hasSeconds = +("seconds" in s && s.seconds !== void 0);
    const hasMinutes = +("minutes" in s && s.minutes !== void 0);
    const hasHours = +("hours" in s && s.hours !== void 0);
    const total = hasSeconds + hasMinutes + hasHours;
    if (total !== 1) {
      throw new Error("Must specify one of seconds, minutes, or hours");
    }
    this.schedule(
      cronIdentifier,
      { ...schedule, type: "interval" },
      functionName,
      ...args
    );
  }
  hourly(cronIdentifier, schedule, functionName, ...args) {
    const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);
    this.schedule(
      cronIdentifier,
      { minuteUTC, type: "hourly" },
      functionName,
      ...args
    );
  }
  daily(cronIdentifier, schedule, functionName, ...args) {
    const hourUTC = validatedHourOfDay(schedule.hourUTC);
    const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);
    this.schedule(
      cronIdentifier,
      { hourUTC, minuteUTC, type: "daily" },
      functionName,
      ...args
    );
  }
  weekly(cronIdentifier, schedule, functionName, ...args) {
    const dayOfWeek = validatedDayOfWeek(schedule.dayOfWeek);
    const hourUTC = validatedHourOfDay(schedule.hourUTC);
    const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);
    this.schedule(
      cronIdentifier,
      { dayOfWeek, hourUTC, minuteUTC, type: "weekly" },
      functionName,
      ...args
    );
  }
  monthly(cronIdentifier, schedule, functionName, ...args) {
    const day = validatedDayOfMonth(schedule.day);
    const hourUTC = validatedHourOfDay(schedule.hourUTC);
    const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);
    this.schedule(
      cronIdentifier,
      { day, hourUTC, minuteUTC, type: "monthly" },
      functionName,
      ...args
    );
  }
  cron(cronIdentifier, cron, functionName, ...args) {
    const c = validatedCronString(cron);
    this.schedule(
      cronIdentifier,
      { cron: c, type: "cron" },
      functionName,
      ...args
    );
  }
  export() {
    return JSON.stringify(this.crons);
  }
}
//# sourceMappingURL=cron.js.map
