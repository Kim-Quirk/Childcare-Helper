{
  "version": 3,
  "sources": ["../../../src/cli/dev.ts"],
  "sourcesContent": ["import inquirer from \"inquirer\";\nimport chalk from \"chalk\";\nimport { Command, Option } from \"commander\";\nimport path from \"path\";\nimport { performance } from \"perf_hooks\";\nimport { getDevDeploymentMaybeThrows, getUrlAndAdminKey } from \"./lib/api\";\nimport { ProjectConfig, readProjectConfig } from \"./lib/config\";\nimport {\n  Context,\n  logFailure,\n  logFinishedStep,\n  oneoffContext,\n  showSpinner,\n  stopSpinner,\n} from \"./lib/context\";\nimport {\n  askAboutWritingToEnv,\n  logConfiguration,\n  logProvisioning,\n  offerToWriteToEnv,\n  writeToEnv,\n} from \"./lib/envvars\";\nimport { checkAuthorization, performLogin } from \"./lib/login\";\nimport { PushOptions, runPush } from \"./lib/push\";\nimport {\n  logAndHandleAxiosError,\n  formatDuration,\n  getCurrentTimeString,\n  hasProject,\n  hasProjects,\n  hasTeam,\n  isInExistingProject as isInExistingProject,\n} from \"./lib/utils\";\nimport { Crash, WatchContext, Watcher } from \"./lib/watch\";\nimport { init } from \"./lib/init\";\nimport { reinit } from \"./lib/reinit\";\n\nexport const dev = new Command(\"dev\")\n  .summary(\"Develop against a dev deployment, watching for changes\")\n  .description(\n    \"Configures a new or existing project if needed. Watches for local changes and pushes them\" +\n      \" to the configured dev deployment. Updates generated types.\"\n  )\n  .option(\"-v, --verbose\", \"Show full listing of changes\")\n  .addOption(\n    new Option(\n      \"--typecheck <mode>\",\n      `Check TypeScript files with \\`tsc --noEmit\\`.`\n    )\n      .choices([\"enable\", \"try\", \"disable\"])\n      .default(\"try\")\n  )\n  .option(\"--save-url\", \"Save deployment URLs to .env and .env.local\")\n  .option(\"--no-save-url\", \"Do not save deployment URLs to .env and .env.local\")\n  .addOption(\n    new Option(\"--codegen <mode>\", \"Regenerate code in `convex/_generated/`\")\n      .choices([\"enable\", \"disable\"])\n      .default(\"enable\")\n  )\n  .option(\"--once\", \"Run only once, do not watch for changes\")\n  .addOption(\n    new Option(\n      \"--configure <choice>\",\n      \"Choose whether to configure new or existing project\"\n    )\n      .choices([\"new\", \"existing\", \"ask\"])\n      .default(\"ask\")\n  )\n  .option(\"--team <team_slug>\", \"The team you'd like to use for this project\")\n  .option(\n    \"--project <project_slug>\",\n    \"The name of the project you'd like to configure\"\n  )\n  .addOption(\n    new Option(\n      \"--prod\",\n      \"Develop live against this project's production deployment.\"\n    ).hideHelp()\n  )\n  .addOption(new Option(\"--trace-events\").hideHelp())\n  .addOption(new Option(\"--admin-key <adminKey>\").hideHelp())\n  .addOption(new Option(\"--url <url>\").hideHelp())\n  // Options for testing\n  .addOption(new Option(\"--override-auth-url <url>\").hideHelp())\n  .addOption(new Option(\"--override-auth-client <id>\").hideHelp())\n  .addOption(new Option(\"--override-auth-username <username>\").hideHelp())\n  .addOption(new Option(\"--override-auth-password <password>\").hideHelp())\n  .showHelpAfterError()\n  .action(async cmdOptions => {\n    const ctx = oneoffContext;\n\n    const saveUrl =\n      cmdOptions.saveUrl === true\n        ? \"yes\"\n        : cmdOptions.saveUrl === false\n        ? \"no\"\n        : \"ask\";\n\n    if (!cmdOptions.url || !cmdOptions.adminKey) {\n      if (!(await checkAuthorization(ctx))) {\n        await performLogin(ctx, cmdOptions);\n      }\n    }\n\n    let projectConfig: ProjectConfig;\n    let options: PushOptions;\n\n    const promptForDevDeployment = (isInit: boolean) => async () => {\n      const devEnvVarWrite = await askAboutWritingToEnv(\n        ctx,\n        \"dev\",\n        null,\n        saveUrl\n      );\n      return async () => {\n        projectConfig = (await readProjectConfig(ctx)).projectConfig;\n        options = await getDevDeploymentOptions(ctx, projectConfig, cmdOptions);\n        await writeToEnv(ctx, devEnvVarWrite, options.url);\n        if (isInit) {\n          logProvisioning(ctx, devEnvVarWrite, \"dev\", options.url);\n        } else {\n          logConfiguration(ctx, devEnvVarWrite, \"dev\", options.url);\n        }\n      };\n    };\n\n    const chosenConfiguration: \"new\" | \"existing\" =\n      cmdOptions.configure === \"ask\" ? null : cmdOptions.configure;\n    const { team, project } = cmdOptions;\n\n    if (!(await isInExistingProject(ctx))) {\n      const choice = chosenConfiguration ?? (await askToConfigure(ctx));\n      switch (choice) {\n        case \"new\":\n          await init(\n            ctx,\n            { team, project },\n            saveUrl,\n            promptForDevDeployment(true)\n          );\n          break;\n        case \"existing\":\n          await reinit(\n            ctx,\n            { team, project },\n            saveUrl,\n            promptForDevDeployment(false)\n          );\n          break;\n        default: {\n          const _exhaustivenessCheck: never = choice;\n        }\n      }\n    } else {\n      projectConfig = (await readProjectConfig(ctx)).projectConfig;\n      try {\n        options = await getDevDeploymentOptionsMaybeThrows(\n          ctx,\n          projectConfig,\n          cmdOptions\n        );\n        await offerToWriteToEnv(ctx, \"dev\", options.url, saveUrl);\n      } catch (error) {\n        const choice =\n          chosenConfiguration ??\n          (await askToReconfigure(ctx, projectConfig, error));\n        switch (choice) {\n          case \"new\":\n            await init(\n              ctx,\n              { team, project },\n              saveUrl,\n              promptForDevDeployment(true),\n              { allowExistingConfig: true }\n            );\n            break;\n          case \"existing\":\n            await reinit(\n              ctx,\n              { team, project },\n              saveUrl,\n              promptForDevDeployment(false),\n              { allowExistingConfig: true }\n            );\n            break;\n          default: {\n            const _exhaustivenessCheck: never = choice;\n          }\n        }\n      }\n    }\n\n    await watchAndPush(ctx, projectConfig!, options!, cmdOptions);\n  });\n\nasync function watchAndPush(\n  outerCtx: Context,\n  { project: projectSlug, team: teamSlug }: ProjectConfig,\n  options: PushOptions,\n  cmdOptions: {\n    once: boolean;\n    traceEvents: boolean;\n  }\n) {\n  let watcher: Watcher | undefined;\n  let numFailures = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const start = performance.now();\n    const ctx = new WatchContext(cmdOptions.traceEvents);\n    showSpinner(ctx, \"Preparing Convex functions...\");\n    // If the project or team slugs change, exit because that's the\n    // simplest thing to do.\n    const config = await readProjectConfig(ctx);\n    if (\n      projectSlug !== config.projectConfig.project ||\n      teamSlug !== config.projectConfig.team\n    ) {\n      logFailure(ctx, \"Detected a change in your `convex.json`. Exiting...\");\n      return await outerCtx.crash(1, \"invalid filesystem data\");\n    }\n\n    try {\n      await runPush(ctx, options);\n      const end = performance.now();\n      numFailures = 0;\n      logFinishedStep(\n        ctx,\n        `${getCurrentTimeString()} Convex functions ready! (${formatDuration(\n          end - start\n        )})`\n      );\n    } catch (e: any) {\n      // Crash the app on unexpected errors.\n      if (!(e instanceof Crash) || !e.errorType || e.errorType === \"fatal\") {\n        throw e;\n      }\n      // Retry after an exponential backoff if we hit a transient error.\n      if (e.errorType === \"transient\") {\n        const delay = nextBackoff(numFailures);\n        numFailures += 1;\n        console.log(\n          chalk.yellow(\n            `Failed due to network error, retrying in ${formatDuration(\n              delay\n            )}...`\n          )\n        );\n        await new Promise(resolve => setTimeout(resolve, delay));\n        continue;\n      }\n      // Fall through if we had a filesystem-based error.\n      console.assert(e.errorType === \"invalid filesystem data\");\n      if (cmdOptions.once) {\n        await outerCtx.crash(1, e.errorType);\n      }\n      // Make sure that we don't spin if this push failed\n      // in any edge cases that didn't call `logFailure`\n      // before throwing.\n      stopSpinner(ctx);\n    }\n    if (cmdOptions.once) {\n      return;\n    }\n    const observations = ctx.fs.finalize();\n    if (observations === \"invalidated\") {\n      console.log(\"Filesystem changed during push, retrying...\");\n      continue;\n    }\n    // Initialize the watcher if we haven't done it already. Chokidar expects to have a\n    // nonempty watch set at initialization, so we can't do it before running our first\n    // push.\n    if (!watcher) {\n      watcher = new Watcher(observations);\n      await watcher.ready();\n    }\n    // Watch new directories if needed.\n    watcher.update(observations);\n\n    // Process events until we find one that overlaps with our previous observations.\n    let anyChanges = false;\n    do {\n      await watcher.waitForEvent();\n      for (const event of watcher.drainEvents()) {\n        if (cmdOptions.traceEvents) {\n          console.log(\n            \"Processing\",\n            event.name,\n            path.relative(\"\", event.absPath)\n          );\n        }\n        const result = observations.overlaps(event);\n        if (result.overlaps) {\n          const relPath = path.relative(\"\", event.absPath);\n          if (cmdOptions.traceEvents) {\n            console.log(`${relPath} ${result.reason}, rebuilding...`);\n          }\n          anyChanges = true;\n          break;\n        }\n      }\n    } while (!anyChanges);\n\n    // Wait for the filesystem to quiesce before starting a new push. It's okay to\n    // drop filesystem events at this stage since we're already committed to doing\n    // a push and resubscribing based on that push's observations.\n    let deadline = performance.now() + quiescenceDelay;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const now = performance.now();\n      if (now >= deadline) {\n        break;\n      }\n      const remaining = deadline - now;\n      if (cmdOptions.traceEvents) {\n        console.log(`Waiting for ${formatDuration(remaining)} to quiesce...`);\n      }\n      const remainingWait = new Promise<\"timeout\">(resolve =>\n        setTimeout(() => resolve(\"timeout\"), deadline - now)\n      );\n      const result = await Promise.race([\n        remainingWait,\n        watcher.waitForEvent().then<\"newEvents\">(() => \"newEvents\"),\n      ]);\n      if (result === \"newEvents\") {\n        for (const event of watcher.drainEvents()) {\n          const result = observations.overlaps(event);\n          // Delay another `quiescenceDelay` since we had an overlapping event.\n          if (result.overlaps) {\n            if (cmdOptions.traceEvents) {\n              console.log(\n                `Received an overlapping event at ${event.absPath}, delaying push.`\n              );\n            }\n            deadline = performance.now() + quiescenceDelay;\n          }\n        }\n      } else {\n        console.assert(result === \"timeout\");\n        // Let the check above `break` from the loop if we're past our deadlne.\n      }\n    }\n  }\n}\n\nasync function askToConfigure(ctx: Context): Promise<\"new\" | \"existing\"> {\n  if (!(await hasProjects(ctx))) {\n    return \"new\";\n  }\n  return await promptToInitWithProjects();\n}\n\ntype DevDeploymentCmdOptions = {\n  url?: string;\n  adminKey?: string;\n  prod?: boolean;\n  verbose?: boolean;\n  typecheck: \"enable\" | \"try\" | \"disable\";\n  codegen: \"enable\" | \"disable\";\n};\n\nasync function askToReconfigure(\n  ctx: Context,\n  projectConfig: ProjectConfig,\n  error: unknown\n): Promise<\"new\" | \"existing\"> {\n  const { team, project } = projectConfig;\n  const [isExistingTeam, existingProject, hasAnyProjects] = await Promise.all([\n    await hasTeam(ctx, team),\n    await hasProject(ctx, team, project),\n    await hasProjects(ctx),\n  ]);\n\n  // The config is good so there must be something else going on,\n  // fatal with the original error\n  if (isExistingTeam && existingProject) {\n    return await logAndHandleAxiosError(ctx, error);\n  }\n\n  if (isExistingTeam) {\n    logFailure(\n      ctx,\n      `Project ${chalk.bold(project)} does not exist in your team ${chalk.bold(\n        team\n      )}, as configured in ${chalk.bold(\"convex.json\")}`\n    );\n  } else {\n    logFailure(\n      ctx,\n      `You don't have access to team ${chalk.bold(\n        team\n      )}, as configured in ${chalk.bold(\"convex.json\")}`\n    );\n  }\n  if (!hasAnyProjects) {\n    const { confirmed } = await inquirer.prompt([\n      {\n        type: \"confirm\",\n        name: \"confirmed\",\n        message: `Create a new project?`,\n        default: \"new\",\n        choices: [\n          { name: \"a new project\", value: \"new\" },\n          { name: \"an existing project\", value: \"existing\" },\n        ],\n      },\n    ]);\n    if (!confirmed) {\n      console.error(\n        \"Run `npx convex dev` in a directory with a valid convex.json.\"\n      );\n      return await ctx.crash(1, \"invalid filesystem data\");\n    }\n    return \"new\";\n  }\n\n  return await promptToReconfigure();\n}\n\nasync function getDevDeploymentOptions(\n  ctx: Context,\n  projectConfig: ProjectConfig,\n  cmdOptions: DevDeploymentCmdOptions\n): Promise<PushOptions> {\n  try {\n    return await getDevDeploymentOptionsMaybeThrows(\n      ctx,\n      projectConfig,\n      cmdOptions\n    );\n  } catch (error) {\n    return await logAndHandleAxiosError(ctx, error);\n  }\n}\n\nasync function getDevDeploymentOptionsMaybeThrows(\n  ctx: Context,\n  projectConfig: ProjectConfig,\n  cmdOptions: DevDeploymentCmdOptions\n): Promise<PushOptions> {\n  const projectSlug = projectConfig.project;\n  const teamSlug = projectConfig.team;\n\n  let deployment: {\n    url: string;\n    adminKey: string;\n  };\n  if (!cmdOptions.url || !cmdOptions.adminKey) {\n    if (cmdOptions.prod) {\n      deployment = await getUrlAndAdminKey(ctx, projectSlug, teamSlug, \"prod\");\n      console.error(\"Found deployment ready\");\n    } else {\n      deployment = await getDevDeploymentMaybeThrows(ctx, {\n        projectSlug,\n        teamSlug,\n      });\n    }\n  }\n  const adminKey = cmdOptions.adminKey ?? deployment!.adminKey;\n  const url = cmdOptions.url ?? deployment!.url;\n  return {\n    adminKey,\n    verbose: !!cmdOptions.verbose,\n    dryRun: false,\n    typecheck: cmdOptions.typecheck,\n    debug: false,\n    codegen: cmdOptions.codegen === \"enable\",\n    url,\n  };\n}\n\nconst initialBackoff = 500;\nconst maxBackoff = 16000;\nconst quiescenceDelay = 500;\n\nfunction nextBackoff(prevFailures: number): number {\n  const baseBackoff = initialBackoff * Math.pow(2, prevFailures);\n  const actualBackoff = Math.min(baseBackoff, maxBackoff);\n  const jitter = actualBackoff * (Math.random() - 0.5);\n  return actualBackoff + jitter;\n}\n\nexport async function promptToInitWithProjects(): Promise<\"new\" | \"existing\"> {\n  const { choice } = await inquirer.prompt([\n    {\n      type: \"list\",\n      name: \"choice\",\n      message: `What would you like to configure?`,\n      default: \"new\",\n      choices: [\n        { name: \"a new project\", value: \"new\" },\n        { name: \"an existing project\", value: \"existing\" },\n      ],\n    },\n  ]);\n  return choice;\n}\n\nexport async function promptToReconfigure(): Promise<\"new\" | \"existing\"> {\n  const { choice } = await inquirer.prompt([\n    {\n      type: \"list\",\n      name: \"choice\",\n      message: `Configure a different project?`,\n      default: \"new\",\n      choices: [\n        { name: \"create new project\", value: \"new\" },\n        { name: \"choose an existing project\", value: \"existing\" },\n      ],\n    },\n  ]);\n  return choice;\n}\n"],
  "mappings": "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",
  "names": ["result"]
}
