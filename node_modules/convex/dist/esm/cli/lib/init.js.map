{
  "version": 3,
  "sources": ["../../../../src/cli/lib/init.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport {\n  pullConfig,\n  writeProjectConfig,\n  configFilepath,\n  readProjectConfig,\n  removedExistingConfig,\n} from \"./config.js\";\nimport {\n  logAndHandleAxiosError,\n  functionsDir,\n  validateOrSelectTeam,\n  bigBrainAPI,\n  loadPackageJson,\n} from \"./utils.js\";\nimport inquirer from \"inquirer\";\nimport path from \"path\";\nimport { doCodegen, doInitCodegen } from \"./codegen\";\nimport {\n  Context,\n  logFailure,\n  logFinishedStep,\n  showSpinner,\n} from \"./context.js\";\nimport { dashboardUrlForConfig } from \"../dashboard.js\";\nimport {\n  askAboutWritingToEnv,\n  logProvisioning,\n  writeToEnv,\n} from \"./envvars.js\";\n\nconst cwd = path.basename(process.cwd());\n\nexport async function init(\n  ctx: Context,\n  config: {\n    team: string | null;\n    project: string | null;\n  },\n  saveUrl: \"yes\" | \"no\" | \"ask\" = \"ask\",\n  promptForAdditionalSteps?: () => Promise<() => Promise<void>>,\n  options: { allowExistingConfig?: boolean } = { allowExistingConfig: false }\n) {\n  const configPath = await configFilepath(ctx);\n  if (ctx.fs.exists(configPath)) {\n    if (!removedExistingConfig(ctx, configPath, options)) {\n      console.error(\n        chalk.green(`Found existing project config \"${configPath}\"`)\n      );\n      return;\n    }\n  }\n\n  const { teamSlug: selectedTeam, chosen: didChooseBetweenTeams } =\n    await validateOrSelectTeam(ctx, config.team, \"Team:\");\n\n  let projectName: string = config.project || cwd;\n  if (process.stdin.isTTY && !config.project) {\n    projectName = (\n      await inquirer.prompt([\n        {\n          type: \"input\",\n          name: \"project\",\n          message: \"Project name:\",\n          default: cwd,\n        },\n      ])\n    ).project;\n  }\n\n  const prodEnvVarWrite = await askAboutWritingToEnv(\n    ctx,\n    \"prod\",\n    null,\n    saveUrl\n  );\n\n  const executeAdditionalSteps = await promptForAdditionalSteps?.();\n\n  showSpinner(ctx, \"Creating new Convex project...\");\n\n  let projectSlug,\n    teamSlug,\n    prodUrl,\n    adminKey,\n    projectsRemaining,\n    projectConfig,\n    modules;\n  try {\n    ({ projectSlug, teamSlug, prodUrl, adminKey, projectsRemaining } =\n      await create_project(ctx, selectedTeam, projectName));\n\n    ({ projectConfig, modules } = await pullConfig(\n      ctx,\n      projectSlug,\n      teamSlug,\n      prodUrl,\n      adminKey\n    ));\n  } catch (err) {\n    logFailure(ctx, \"Unable to create project.\");\n    return await logAndHandleAxiosError(ctx, err);\n  }\n\n  const teamMessage = didChooseBetweenTeams\n    ? \" in team \" + chalk.bold(teamSlug)\n    : \"\";\n  logFinishedStep(\n    ctx,\n    `Created project ${chalk.bold(\n      projectSlug\n    )}${teamMessage}, manage it at ${chalk.bold(\n      await dashboardUrlForConfig(projectConfig, false)\n    )}`\n  );\n\n  if (projectsRemaining <= 2) {\n    console.log(\n      chalk.yellow.bold(\n        `Your account now has ${projectsRemaining} project${\n          projectsRemaining === 1 ? \"\" : \"s\"\n        } remaining.`\n      )\n    );\n  }\n\n  if (modules.length > 0) {\n    console.error(chalk.red(\"Error: Unexpected modules in new project\"));\n    return await ctx.crash(1, undefined);\n  }\n\n  // create-react-app bans imports from outside of src, so we can just\n  // put the functions directory inside of src/ to work around this issue.\n  const packages = await loadPackageJson(ctx);\n  const isCreateReactApp = \"react-scripts\" in packages;\n  if (isCreateReactApp) {\n    projectConfig.functions = `src/${projectConfig.functions}`;\n  }\n\n  await writeProjectConfig(ctx, projectConfig);\n  await doInitCodegen(\n    ctx,\n    functionsDir(configPath, projectConfig),\n    true // quiet\n  );\n\n  {\n    const { projectConfig, configPath } = await readProjectConfig(ctx);\n    await doCodegen({\n      ctx,\n      projectConfig,\n      configPath,\n      // Don't typecheck because there isn't any code to check yet.\n      typeCheckMode: \"disable\",\n      quiet: true,\n    });\n  }\n\n  logFinishedStep(ctx, `Convex configuration written to ${configPath}`);\n  await writeToEnv(ctx, prodEnvVarWrite, projectConfig.prodUrl);\n  logProvisioning(ctx, prodEnvVarWrite, \"prod\", projectConfig.prodUrl);\n  await executeAdditionalSteps?.();\n\n  console.log(\n    `\\nWrite your Convex functions in ${chalk.bold(\n      functionsDir(configPath, projectConfig)\n    )}`\n  );\n  console.log(\n    \"Give us feedback at https://convex.dev/community or support@convex.dev\\n\"\n  );\n}\n\ninterface CreateProjectArgs {\n  projectName: string;\n  team: string;\n  backendVersionOverride?: string;\n}\n\n/** Provision a new empty project and return the origin. */\nasync function create_project(\n  ctx: Context,\n  team: string,\n  projectName: string\n): Promise<{\n  projectSlug: string;\n  teamSlug: string;\n  prodUrl: string;\n  adminKey: string;\n  projectsRemaining: number;\n}> {\n  const provisioningArgs: CreateProjectArgs = {\n    team,\n    backendVersionOverride: process.env.CONVEX_BACKEND_VERSION_OVERRIDE,\n    projectName,\n  };\n  const data = await bigBrainAPI(\n    ctx,\n    \"POST\",\n    \"create_project\",\n    provisioningArgs\n  );\n\n  const projectSlug = data.projectSlug;\n  const teamSlug = data.teamSlug;\n  const prodUrl = data.prodUrl;\n  const adminKey = data.adminKey;\n  const projectsRemaining = data.projectsRemaining;\n  if (\n    projectSlug === undefined ||\n    teamSlug === undefined ||\n    prodUrl === undefined ||\n    adminKey === undefined ||\n    projectsRemaining === undefined\n  ) {\n    throw new Error(\n      \"Unknown error during provisioning: \" + JSON.stringify(data)\n    );\n  }\n  return { projectSlug, teamSlug, prodUrl, adminKey, projectsRemaining };\n}\n"],
  "mappings": "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",
  "names": ["projectConfig", "configPath"]
}
