"use strict";
import { errors, custom } from "openid-client";
import {
  globalConfigPath,
  rootDirectory,
  getAuthHeader,
  bigBrainAPI,
  logAndHandleAxiosError
} from "./utils.js";
import open from "open";
import chalk from "chalk";
import { provisionHost } from "./config.js";
import { version } from "../../index.js";
import axios from "axios";
import {
  changeSpinner,
  logError,
  logFailure,
  logFinishedStep,
  showSpinner
} from "./context.js";
import { Issuer } from "openid-client";
import inquirer from "inquirer";
import { hostname } from "os";
import { execSync } from "child_process";
import os from "os";
const SCOPE = "openid email profile";
custom.setHttpOptionsDefaults({
  timeout: 1e4
});
async function writeGlobalConfig(ctx, config) {
  const dirName = rootDirectory();
  ctx.fs.mkdir(dirName, { allowExisting: true });
  const path = globalConfigPath();
  try {
    ctx.fs.writeUtf8File(path, JSON.stringify(config));
  } catch (err) {
    logFailure(
      ctx,
      chalk.red(`Failed to write auth config to ${path} with error: ${err}`)
    );
    return await ctx.crash(1, "invalid filesystem data", err);
  }
  logFinishedStep(ctx, `Saved credentials to ${formatPathForPrinting(path)}`);
}
function formatPathForPrinting(path) {
  const homedir = os.homedir();
  if (process.platform === "darwin" && path.startsWith(homedir)) {
    return path.replace(homedir, "~");
  }
  return path;
}
export async function checkAuthorization(ctx) {
  const header = await getAuthHeader(ctx);
  if (!header) {
    return false;
  }
  try {
    const resp = await axios.head(`${provisionHost}/api/authorize`, {
      headers: {
        Authorization: header,
        "Convex-Client": `npm-cli-${version}`
      },
      validateStatus: (_) => true
    });
    if (resp.status !== 200) {
      return false;
    }
  } catch (e) {
    logError(
      ctx,
      `Unexpected error when authorizing - are you connected to the internet?`
    );
    return await logAndHandleAxiosError(ctx, e);
  }
  const shouldContinue = await optins(ctx);
  if (!shouldContinue) {
    return await ctx.crash(1, void 0);
  }
  return true;
}
async function performDeviceAuthorization(ctx, auth0Client, shouldOpen) {
  let handle;
  try {
    handle = await auth0Client.deviceAuthorization({
      scope: SCOPE,
      audience: "https://console.convex.dev/api/"
    });
  } catch (error) {
    const answers = await inquirer.prompt([
      {
        type: "input",
        name: "authToken",
        message: "Open https://dash.convex.dev/auth, log in and paste the token here:"
      }
    ]);
    return answers.authToken;
  }
  const { verification_uri_complete, user_code, expires_in } = handle;
  console.log(`Visit ${verification_uri_complete} to finish logging in.`);
  console.log(
    `You should see the following code which expires in ${expires_in % 60 === 0 ? `${expires_in / 60} minutes` : `${expires_in} seconds`}: ${user_code}`
  );
  if (shouldOpen) {
    shouldOpen = (await inquirer.prompt([
      {
        name: "openBrowser",
        message: `Open the browser?`,
        type: "confirm",
        default: true
      }
    ])).openBrowser;
  }
  if (shouldOpen) {
    showSpinner(
      ctx,
      `Opening ${verification_uri_complete} in your browser to log in...
`
    );
    try {
      await open(verification_uri_complete);
      changeSpinner(ctx, "Waiting for the confirmation...");
    } catch (err) {
      logError(ctx, chalk.red(`Unable to open browser.`));
      changeSpinner(
        ctx,
        `Manually open ${verification_uri_complete} in your browser to log in.`
      );
    }
  } else {
    showSpinner(
      ctx,
      `Open ${verification_uri_complete} in your browser to log in.`
    );
  }
  try {
    const tokens = await handle.poll();
    if (typeof tokens.access_token === "string") {
      return tokens.access_token;
    } else {
      throw Error("Access token is missing");
    }
  } catch (err) {
    switch (err.error) {
      case "access_denied":
        logFailure(ctx, "Access denied.");
        return await ctx.crash(1, err);
      case "expired_token":
        logFailure(ctx, "Device flow expired.");
        return await ctx.crash(1, err);
      default:
        if (err instanceof errors.OPError) {
          logFailure(
            ctx,
            `Error = ${err.error}; error_description = ${err.error_description}`
          );
        } else {
          logFailure(ctx, `Login failed with error: ${err}`);
        }
        return await ctx.crash(1, err);
    }
  }
}
async function performPasswordAuthentication(ctx, issuer, clientId, username, password) {
  const options = {
    method: "POST",
    url: new URL("/oauth/token", issuer).href,
    headers: { "content-type": "application/x-www-form-urlencoded" },
    data: new URLSearchParams({
      grant_type: "password",
      username,
      password,
      scope: SCOPE,
      client_id: clientId,
      audience: "https://console.convex.dev/api/"
    })
  };
  try {
    const response = await axios.request(options);
    if (typeof response.data.access_token === "string") {
      return response.data.access_token;
    } else {
      throw Error("Access token is missing");
    }
  } catch (err) {
    console.log(`Password flow failed: ${err}`);
    if (err.response) {
      console.log(`${JSON.stringify(err.response.data)}`);
    }
    return await ctx.crash(1, err);
  }
}
export async function performLogin(ctx, {
  overrideAuthUrl,
  overrideAuthClient,
  overrideAuthUsername,
  overrideAuthPassword,
  open: open2,
  optIn,
  deviceName: deviceNameOverride
} = {}) {
  let deviceName = deviceNameOverride ?? "";
  if (!deviceName && process.platform === "darwin") {
    try {
      deviceName = execSync("scutil --get ComputerName").toString().trim();
    } catch {
    }
  }
  if (!deviceName) {
    deviceName = hostname();
  }
  if (process.stdin.isTTY && !deviceNameOverride) {
    console.log(
      chalk.bold(`Welcome to developing with Convex, let's get you logged in.`)
    );
    const answers = await inquirer.prompt([
      {
        type: "input",
        name: "deviceName",
        message: "Device name:",
        default: deviceName
      }
    ]);
    deviceName = answers.deviceName;
  }
  const issuer = overrideAuthUrl ?? "https://auth.convex.dev";
  const auth0 = await Issuer.discover(issuer);
  const clientId = overrideAuthClient ?? "HFtA247jp9iNs08NTLIB7JsNPMmRIyfi";
  const auth0Client = new auth0.Client({
    client_id: clientId,
    token_endpoint_auth_method: "none",
    id_token_signed_response_alg: "RS256"
  });
  let accessToken;
  if (overrideAuthUsername && overrideAuthPassword) {
    accessToken = await performPasswordAuthentication(
      ctx,
      issuer,
      clientId,
      overrideAuthUsername,
      overrideAuthPassword
    );
  } else {
    accessToken = await performDeviceAuthorization(
      ctx,
      auth0Client,
      open2 ?? true
    );
  }
  const authorizeArgs = {
    authnToken: accessToken,
    deviceName
  };
  const data = await bigBrainAPI(ctx, "POST", "authorize", authorizeArgs);
  const globalConfig = { accessToken: data.accessToken };
  try {
    await writeGlobalConfig(ctx, globalConfig);
  } catch (err) {
    return await ctx.crash(1, "invalid filesystem data", err);
  }
  if (optIn ?? true) {
    const shouldContinue = await optins(ctx);
    if (!shouldContinue) {
      return await ctx.crash(1, void 0);
    }
  }
}
async function optins(ctx) {
  const data = await bigBrainAPI(ctx, "POST", "check_opt_ins", {});
  if (data.optInsToAccept.length === 0) {
    return true;
  }
  for (const optInToAccept of data.optInsToAccept) {
    const confirmed = (await inquirer.prompt([
      {
        type: "confirm",
        name: "confirmed",
        message: optInToAccept.message
      }
    ])).confirmed;
    if (!confirmed) {
      console.log("Please accept the Terms of Service to use Convex.");
      return Promise.resolve(false);
    }
  }
  const optInsAccepted = data.optInsToAccept.map((o) => o.optIn);
  const args = { optInsAccepted };
  await bigBrainAPI(ctx, "POST", "accept_opt_ins", args);
  return true;
}
//# sourceMappingURL=login.js.map
