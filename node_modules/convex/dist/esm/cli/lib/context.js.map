{
  "version": 3,
  "sources": ["../../../../src/cli/lib/context.ts"],
  "sourcesContent": ["import { Filesystem, nodeFs } from \"../../bundler\";\nimport * as Sentry from \"@sentry/node\";\nimport chalk from \"chalk\";\nimport ora, { Ora } from \"ora\";\n\n/**\n * How the error should be handled when running `npx convex dev`.\n *\n * \"invalid filesystem data\": The error was likely caused by a developer's local\n * file system (e.g. `tsc` fails due to a syntax error). The `convex dev`\n * command will then print out the error and wait for the file to change before\n * retrying.\n *\n * \"transient\": The error was some transient issue (e.g. a network\n * error). This will then cause a retry after an exponential backoff.\n *\n * \"fatal\": This error is truly permanent. Exit `npx convex dev` because the\n * developer will need to take a manual commandline action.\n */\nexport type ErrorType = \"invalid filesystem data\" | \"transient\" | \"fatal\";\n\nexport interface Context {\n  fs: Filesystem;\n  deprecationMessagePrinted: boolean;\n  spinner: Ora | undefined;\n  // Reports to Sentry and either throws FatalError or exits the process.\n  // Does not print the error.\n  crash(exitCode: number, errorType?: ErrorType, err?: any): Promise<never>;\n}\n\nexport const oneoffContext: Context = {\n  fs: nodeFs,\n  deprecationMessagePrinted: false,\n  spinner: undefined,\n  async crash(exitCode: number, _errorType?: ErrorType, err?: any) {\n    return await flushAndExit(exitCode, err);\n  },\n};\n\nasync function flushAndExit(exitCode: number, err?: any) {\n  if (err) {\n    Sentry.captureException(err);\n  }\n  await Sentry.close();\n  // eslint-disable-next-line no-restricted-syntax\n  return process.exit(exitCode);\n}\n\n// Handles clearing spinner so that it doesn't get messed up\nexport function logError(ctx: Context, message: string) {\n  ctx.spinner?.clear();\n  console.error(message);\n}\n\n// Handles clearing spinner so that it doesn't get messed up\nexport function logWarning(ctx: Context, message: string) {\n  ctx.spinner?.clear();\n  console.error(message);\n}\n\n// Handles clearing spinner so that it doesn't get messed up\nexport function logMessage(ctx: Context, ...logged: any) {\n  ctx.spinner?.clear();\n  console.log(...logged);\n}\n\n// Start a spinner.\n// To change its message use changeSpinner.\n// To print warnings/erros while it's running use logError or logWarning.\n// To stop it due to an error use logFailure.\n// To stop it due to success use logFinishedStep.\nexport function showSpinner(ctx: Context, message: string) {\n  ctx.spinner?.stop();\n  ctx.spinner = ora({\n    text: message,\n    stream: process.stdout,\n  }).start();\n}\n\nexport function changeSpinner(ctx: Context, message: string) {\n  if (ctx.spinner) {\n    ctx.spinner.text = message;\n  } else {\n    console.log(message);\n  }\n}\n\nexport function logFailure(ctx: Context, message: string) {\n  if (ctx.spinner) {\n    ctx.spinner.fail(message);\n    ctx.spinner = undefined;\n  } else {\n    console.log(`${chalk.red(`\u2716`)} ${message}`);\n  }\n}\n\n// Stops and removes spinner if one is active\nexport function logFinishedStep(ctx: Context, message: string) {\n  if (ctx.spinner) {\n    ctx.spinner.succeed(message);\n    ctx.spinner = undefined;\n  } else {\n    console.log(`${chalk.green(`\u2714`)} ${message}`);\n  }\n}\n\nexport function stopSpinner(ctx: Context) {\n  if (ctx.spinner) {\n    ctx.spinner.stop();\n    ctx.spinner = undefined;\n  }\n}\n\nexport function pauseSpinner(ctx: Context) {\n  if (ctx.spinner) {\n    ctx.spinner.stop();\n  }\n}\n\nexport function resumeSpinner(ctx: Context) {\n  if (ctx.spinner) {\n    ctx.spinner.start();\n  }\n}\n"],
  "mappings": ";AAAA,SAAqB,cAAc;AACnC,YAAY,YAAY;AACxB,OAAO,WAAW;AAClB,OAAO,SAAkB;AA2BlB,aAAM,gBAAyB;AAAA,EACpC,IAAI;AAAA,EACJ,2BAA2B;AAAA,EAC3B,SAAS;AAAA,EACT,MAAM,MAAM,UAAkB,YAAwB,KAAW;AAC/D,WAAO,MAAM,aAAa,UAAU,GAAG;AAAA,EACzC;AACF;AAEA,eAAe,aAAa,UAAkB,KAAW;AACvD,MAAI,KAAK;AACP,WAAO,iBAAiB,GAAG;AAAA,EAC7B;AACA,QAAM,OAAO,MAAM;AAEnB,SAAO,QAAQ,KAAK,QAAQ;AAC9B;AAGO,gBAAS,SAAS,KAAc,SAAiB;AACtD,MAAI,SAAS,MAAM;AACnB,UAAQ,MAAM,OAAO;AACvB;AAGO,gBAAS,WAAW,KAAc,SAAiB;AACxD,MAAI,SAAS,MAAM;AACnB,UAAQ,MAAM,OAAO;AACvB;AAGO,gBAAS,WAAW,QAAiB,QAAa;AACvD,MAAI,SAAS,MAAM;AACnB,UAAQ,IAAI,GAAG,MAAM;AACvB;AAOO,gBAAS,YAAY,KAAc,SAAiB;AACzD,MAAI,SAAS,KAAK;AAClB,MAAI,UAAU,IAAI;AAAA,IAChB,MAAM;AAAA,IACN,QAAQ,QAAQ;AAAA,EAClB,CAAC,EAAE,MAAM;AACX;AAEO,gBAAS,cAAc,KAAc,SAAiB;AAC3D,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,OAAO;AAAA,EACrB,OAAO;AACL,YAAQ,IAAI,OAAO;AAAA,EACrB;AACF;AAEO,gBAAS,WAAW,KAAc,SAAiB;AACxD,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,KAAK,OAAO;AACxB,QAAI,UAAU;AAAA,EAChB,OAAO;AACL,YAAQ,IAAI,GAAG,MAAM,IAAI,QAAG,KAAK,SAAS;AAAA,EAC5C;AACF;AAGO,gBAAS,gBAAgB,KAAc,SAAiB;AAC7D,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,QAAQ,OAAO;AAC3B,QAAI,UAAU;AAAA,EAChB,OAAO;AACL,YAAQ,IAAI,GAAG,MAAM,MAAM,QAAG,KAAK,SAAS;AAAA,EAC9C;AACF;AAEO,gBAAS,YAAY,KAAc;AACxC,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,KAAK;AACjB,QAAI,UAAU;AAAA,EAChB;AACF;AAEO,gBAAS,aAAa,KAAc;AACzC,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,KAAK;AAAA,EACnB;AACF;AAEO,gBAAS,cAAc,KAAc;AAC1C,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,MAAM;AAAA,EACpB;AACF;",
  "names": []
}
