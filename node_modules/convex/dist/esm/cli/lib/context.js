"use strict";
import { nodeFs } from "../../bundler";
import * as Sentry from "@sentry/node";
import chalk from "chalk";
import ora from "ora";
export const oneoffContext = {
  fs: nodeFs,
  deprecationMessagePrinted: false,
  spinner: void 0,
  async crash(exitCode, _errorType, err) {
    return await flushAndExit(exitCode, err);
  }
};
async function flushAndExit(exitCode, err) {
  if (err) {
    Sentry.captureException(err);
  }
  await Sentry.close();
  return process.exit(exitCode);
}
export function logError(ctx, message) {
  ctx.spinner?.clear();
  console.error(message);
}
export function logWarning(ctx, message) {
  ctx.spinner?.clear();
  console.error(message);
}
export function logMessage(ctx, ...logged) {
  ctx.spinner?.clear();
  console.log(...logged);
}
export function showSpinner(ctx, message) {
  ctx.spinner?.stop();
  ctx.spinner = ora({
    text: message,
    stream: process.stdout
  }).start();
}
export function changeSpinner(ctx, message) {
  if (ctx.spinner) {
    ctx.spinner.text = message;
  } else {
    console.log(message);
  }
}
export function logFailure(ctx, message) {
  if (ctx.spinner) {
    ctx.spinner.fail(message);
    ctx.spinner = void 0;
  } else {
    console.log(`${chalk.red(`\u2716`)} ${message}`);
  }
}
export function logFinishedStep(ctx, message) {
  if (ctx.spinner) {
    ctx.spinner.succeed(message);
    ctx.spinner = void 0;
  } else {
    console.log(`${chalk.green(`\u2714`)} ${message}`);
  }
}
export function stopSpinner(ctx) {
  if (ctx.spinner) {
    ctx.spinner.stop();
    ctx.spinner = void 0;
  }
}
export function pauseSpinner(ctx) {
  if (ctx.spinner) {
    ctx.spinner.stop();
  }
}
export function resumeSpinner(ctx) {
  if (ctx.spinner) {
    ctx.spinner.start();
  }
}
//# sourceMappingURL=context.js.map
