"use strict";
import { convexToJson } from "./value.js";
export class Validator {
  constructor(json, optional) {
    this.json = json;
    this.optional = optional;
  }
}
export const v = {
  id(tableName) {
    return new Validator({ type: "id", tableName }, false);
  },
  null() {
    return new Validator({ type: "null" }, false);
  },
  number() {
    return new Validator({ type: "number" }, false);
  },
  bigint() {
    return new Validator({ type: "bigint" }, false);
  },
  boolean() {
    return new Validator({ type: "boolean" }, false);
  },
  string() {
    return new Validator({ type: "string" }, false);
  },
  bytes() {
    return new Validator({ type: "bytes" }, false);
  },
  literal(literal) {
    const value = convexToJson(literal);
    return new Validator({ type: "literal", value }, false);
  },
  array(values) {
    return new Validator({ type: "array", value: values.json }, false);
  },
  set(values) {
    return new Validator({ type: "set", value: values.json }, false);
  },
  map(keys, values) {
    return new Validator(
      {
        type: "map",
        keys: keys.json,
        values: values.json
      },
      false
    );
  },
  object(schema) {
    return new Validator(
      {
        type: "object",
        value: Object.fromEntries(
          Object.entries(schema).map(([k, v2]) => [
            k,
            { fieldType: v2.json, optional: v2.optional }
          ])
        )
      },
      false
    );
  },
  union(...schemaTypes) {
    return new Validator(
      {
        type: "union",
        value: schemaTypes.map((t) => t.json)
      },
      false
    );
  },
  any() {
    return new Validator({ type: "any" }, false);
  },
  optional(inner) {
    return new Validator(inner.json, true);
  }
};
//# sourceMappingURL=validator.js.map
