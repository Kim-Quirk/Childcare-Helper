{
  "version": 3,
  "sources": ["../../../src/cli/convexImport.ts"],
  "sourcesContent": ["import { Command, Option } from \"commander\";\nimport chalk from \"chalk\";\nimport { readProjectConfig } from \"./lib/config\";\nimport {\n  ensureHasConvexDependency,\n  logAndHandleAxiosError,\n  formatSize,\n} from \"./lib/utils\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { version } from \"../index.js\";\nimport { getUrlAndAdminKey } from \"./lib/api\";\nimport { oneoffContext } from \"./lib/context\";\n\nexport const convexImport = new Command(\"import\")\n  .description(\"Import data from a file into a table\")\n  .addOption(\n    new Option(\n      \"--format <format>\",\n      \"Input file format. This flag is only required if the filename is missing an extension.\\\n      CSV files must have a header, and each rows' entries are interpreted either as a (floating point) number or a string.\\\n      JSONLines files must have a JSON object per line. JSON files must be an array of JSON objects.\"\n    ).choices([\"csv\", \"jsonLines\", \"jsonArray\"])\n  )\n  .option(\n    \"--prod\",\n    \"Import data into this project's production deployment. Defaults to your dev deployment without this flag.\"\n  )\n  .addOption(\n    new Option(\"--replace\", \"Replace any existing data in the table\").conflicts(\n      \"--append\"\n    )\n  )\n  .addOption(\n    new Option(\n      \"--append\",\n      \"Append to any existing data in the table\"\n    ).conflicts(\"--replace\")\n  )\n  .addOption(new Option(\"--url <url>\").hideHelp())\n  .addOption(new Option(\"--admin-key <adminKey>\").hideHelp())\n  .argument(\"<tableName>\", \"Destination table name\")\n  .argument(\"<path>\", \"Path to the input file\")\n  .showHelpAfterError()\n  .action(async (tableName: string, path: string, options: any) => {\n    const ctx = oneoffContext;\n    let format = options.format;\n    const pathParts = path.split(\".\");\n    if (pathParts.length > 1) {\n      const fileType = pathParts[pathParts.length - 1];\n      const formatToFileType: Record<string, string> = {\n        csv: \"csv\",\n        jsonLines: \"jsonl\",\n        jsonArray: \"json\",\n      };\n      const fileTypeToFormat = Object.fromEntries(\n        Object.entries(formatToFileType).map(a => a.reverse())\n      );\n      if (format && fileType !== formatToFileType[format]) {\n        console.warn(\n          chalk.yellow(\n            `Warning: Extension of file ${path} (${fileType}) does not match specified format: ${format} (${formatToFileType[format]}).`\n          )\n        );\n      }\n      if (format === undefined) {\n        format = fileTypeToFormat[fileType];\n      }\n    }\n    if (!format) {\n      throw new Error(\n        \"No input file format inferred by the filename extension or specified. Specify your input file's format using the `--format` flag.\"\n      );\n    }\n    const { projectConfig } = await readProjectConfig(ctx);\n    const deploymentType = options.prod ? \"prod\" : \"dev\";\n    let deploymentUrl, adminKey;\n    if (!options.url || !options.adminKey) {\n      let url;\n      ({ url, adminKey } = await getUrlAndAdminKey(\n        ctx,\n        projectConfig.project,\n        projectConfig.team,\n        deploymentType\n      ));\n      deploymentUrl = url;\n    }\n    adminKey = options.adminKey ?? adminKey;\n    deploymentUrl = options.url ?? deploymentUrl;\n    await ensureHasConvexDependency(ctx, \"import\");\n\n    if (!ctx.fs.exists(path)) {\n      console.error(chalk.gray(`Error: Path ${path} does not exist.`));\n      return await ctx.crash(1, \"invalid filesystem data\");\n    }\n    const data = ctx.fs.createReadStream(path);\n    const fileStats = ctx.fs.stat(path);\n    console.log(\n      chalk.gray(`Importing ${path} (${formatSize(fileStats.size)})...`)\n    );\n    const urlName = encodeURIComponent(tableName);\n    const urlFormat = encodeURIComponent(format);\n    const client = axios.create();\n    let resp: AxiosResponse;\n    let mode = \"requireEmpty\";\n    if (options.append) {\n      mode = \"append\";\n    } else if (options.replace) {\n      mode = \"replace\";\n    }\n    try {\n      const url = `${deploymentUrl}/api/import?tableName=${urlName}&format=${urlFormat}&mode=${mode}`;\n      resp = await client.post(url, data, {\n        headers: {\n          Authorization: `Convex ${adminKey}`,\n          \"Content-Type\": \"text/plain\",\n          \"Convex-Client\": `npm-cli-${version}`,\n        },\n      });\n    } catch (e) {\n      return await logAndHandleAxiosError(ctx, e);\n    }\n    console.log(\n      chalk.green(`Wrote ${resp.data.numWritten} rows to ${tableName}.`)\n    );\n  });\n"],
  "mappings": "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",
  "names": ["chalk", "axios"]
}
