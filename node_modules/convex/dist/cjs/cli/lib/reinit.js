"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var reinit_exports = {};
__export(reinit_exports, {
  reinit: () => reinit
});
module.exports = __toCommonJS(reinit_exports);
var import_chalk = __toESM(require("chalk"));
var import_api = require("./api.js");
var import_codegen = require("./codegen.js");
var import_config = require("./config.js");
var import_context2 = require("./context.js");
var import_utils = require("./utils.js");
var import_envvars = require("./envvars.js");
async function reinit(ctx, config, saveUrl = "ask", promptForAdditionalSteps, options = { allowExistingConfig: false }) {
  const configFn = (0, import_config.configName)();
  if (ctx.fs.exists(configFn)) {
    if (!(0, import_config.removedExistingConfig)(ctx, configFn, options)) {
      console.error(import_chalk.default.red(`File "${configFn}" already exists.`));
      console.error(
        "If you'd like to regenerate it, delete the file and rerun `npx convex reinit`"
      );
      return await ctx.crash(1, "invalid filesystem data");
    }
  }
  const { teamSlug } = await (0, import_utils.validateOrSelectTeam)(ctx, config.team, "Team:");
  const projectSlug = await (0, import_utils.validateOrSelectProject)(
    ctx,
    config.project,
    teamSlug,
    "Configure project",
    "Project:"
  );
  if (!projectSlug) {
    console.log("Aborted");
    return;
  }
  const prodEnvVarWrite = await (0, import_envvars.askAboutWritingToEnv)(
    ctx,
    "prod",
    null,
    saveUrl
  );
  const executeAdditionalSteps = await promptForAdditionalSteps?.();
  (0, import_context2.showSpinner)(ctx, `Reinitializing project ${projectSlug}...
`);
  const { url, adminKey } = await (0, import_api.getUrlAndAdminKey)(
    ctx,
    projectSlug,
    teamSlug,
    "prod"
  );
  {
    const { projectConfig: projectConfig2 } = await (0, import_config.pullConfig)(
      ctx,
      projectSlug,
      teamSlug,
      url,
      adminKey
    );
    await (0, import_config.writeProjectConfig)(ctx, projectConfig2);
  }
  const { projectConfig, configPath } = await (0, import_config.readProjectConfig)(ctx);
  await (0, import_codegen.doCodegen)({
    ctx,
    projectConfig,
    configPath,
    typeCheckMode: "disable",
    quiet: true
  });
  (0, import_context2.logFinishedStep)(ctx, `Convex configuration written to ${configPath}`);
  await (0, import_envvars.writeToEnv)(ctx, prodEnvVarWrite, projectConfig.prodUrl);
  (0, import_envvars.logConfiguration)(ctx, prodEnvVarWrite, "prod", projectConfig.prodUrl);
  await executeAdditionalSteps?.();
}
//# sourceMappingURL=reinit.js.map
