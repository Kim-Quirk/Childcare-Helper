{
  "version": 3,
  "sources": ["../../../../src/cli/lib/reinit.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { Context } from \"./context.js\";\nimport { getUrlAndAdminKey } from \"./api.js\";\nimport { doCodegen } from \"./codegen.js\";\nimport {\n  configName,\n  pullConfig,\n  readProjectConfig,\n  removedExistingConfig,\n  writeProjectConfig,\n} from \"./config.js\";\nimport { logFinishedStep, showSpinner } from \"./context.js\";\nimport { validateOrSelectProject, validateOrSelectTeam } from \"./utils.js\";\nimport {\n  askAboutWritingToEnv,\n  logConfiguration,\n  writeToEnv,\n} from \"./envvars.js\";\n\nexport async function reinit(\n  ctx: Context,\n  config: {\n    team: string | null;\n    project: string | null;\n  },\n  saveUrl: \"yes\" | \"no\" | \"ask\" = \"ask\",\n  promptForAdditionalSteps?: () => Promise<() => Promise<void>>,\n  options: { allowExistingConfig?: boolean } = { allowExistingConfig: false }\n) {\n  const configFn = configName();\n  if (ctx.fs.exists(configFn)) {\n    if (!removedExistingConfig(ctx, configFn, options)) {\n      console.error(chalk.red(`File \"${configFn}\" already exists.`));\n      console.error(\n        \"If you'd like to regenerate it, delete the file and rerun `npx convex reinit`\"\n      );\n      return await ctx.crash(1, \"invalid filesystem data\");\n    }\n  }\n\n  const { teamSlug } = await validateOrSelectTeam(ctx, config.team, \"Team:\");\n\n  const projectSlug = await validateOrSelectProject(\n    ctx,\n    config.project,\n    teamSlug,\n    \"Configure project\",\n    \"Project:\"\n  );\n  if (!projectSlug) {\n    console.log(\"Aborted\");\n    return;\n  }\n\n  const prodEnvVarWrite = await askAboutWritingToEnv(\n    ctx,\n    \"prod\",\n    null,\n    saveUrl\n  );\n\n  const executeAdditionalSteps = await promptForAdditionalSteps?.();\n\n  showSpinner(ctx, `Reinitializing project ${projectSlug}...\\n`);\n\n  const { url, adminKey } = await getUrlAndAdminKey(\n    ctx,\n    projectSlug,\n    teamSlug,\n    \"prod\"\n  );\n  {\n    const { projectConfig } = await pullConfig(\n      ctx,\n      projectSlug,\n      teamSlug,\n      url,\n      adminKey\n    );\n    await writeProjectConfig(ctx, projectConfig);\n  }\n\n  const { projectConfig, configPath } = await readProjectConfig(ctx);\n  await doCodegen({\n    ctx,\n    projectConfig,\n    configPath,\n    typeCheckMode: \"disable\",\n    quiet: true,\n  });\n\n  logFinishedStep(ctx, `Convex configuration written to ${configPath}`);\n  await writeToEnv(ctx, prodEnvVarWrite, projectConfig.prodUrl);\n  logConfiguration(ctx, prodEnvVarWrite, \"prod\", projectConfig.prodUrl);\n  await executeAdditionalSteps?.();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAElB,iBAAkC;AAClC,qBAA0B;AAC1B,oBAMO;AACP,IAAAA,kBAA6C;AAC7C,mBAA8D;AAC9D,qBAIO;AAEP,eAAsB,OACpB,KACA,QAIA,UAAgC,OAChC,0BACA,UAA6C,EAAE,qBAAqB,MAAM,GAC1E;AACA,QAAM,eAAW,0BAAW;AAC5B,MAAI,IAAI,GAAG,OAAO,QAAQ,GAAG;AAC3B,QAAI,KAAC,qCAAsB,KAAK,UAAU,OAAO,GAAG;AAClD,cAAQ,MAAM,aAAAC,QAAM,IAAI,SAAS,2BAA2B,CAAC;AAC7D,cAAQ;AAAA,QACN;AAAA,MACF;AACA,aAAO,MAAM,IAAI,MAAM,GAAG,yBAAyB;AAAA,IACrD;AAAA,EACF;AAEA,QAAM,EAAE,SAAS,IAAI,UAAM,mCAAqB,KAAK,OAAO,MAAM,OAAO;AAEzE,QAAM,cAAc,UAAM;AAAA,IACxB;AAAA,IACA,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,MAAI,CAAC,aAAa;AAChB,YAAQ,IAAI,SAAS;AACrB;AAAA,EACF;AAEA,QAAM,kBAAkB,UAAM;AAAA,IAC5B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,yBAAyB,MAAM,2BAA2B;AAEhE,mCAAY,KAAK,0BAA0B;AAAA,CAAkB;AAE7D,QAAM,EAAE,KAAK,SAAS,IAAI,UAAM;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA;AACE,UAAM,EAAE,eAAAC,eAAc,IAAI,UAAM;AAAA,MAC9B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,cAAM,kCAAmB,KAAKA,cAAa;AAAA,EAC7C;AAEA,QAAM,EAAE,eAAe,WAAW,IAAI,UAAM,iCAAkB,GAAG;AACjE,YAAM,0BAAU;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAe;AAAA,IACf,OAAO;AAAA,EACT,CAAC;AAED,uCAAgB,KAAK,mCAAmC,YAAY;AACpE,YAAM,2BAAW,KAAK,iBAAiB,cAAc,OAAO;AAC5D,uCAAiB,KAAK,iBAAiB,QAAQ,cAAc,OAAO;AACpE,QAAM,yBAAyB;AACjC;",
  "names": ["import_context", "chalk", "projectConfig"]
}
