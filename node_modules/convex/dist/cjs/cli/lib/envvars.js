"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var envvars_exports = {};
__export(envvars_exports, {
  askAboutWritingToEnv: () => askAboutWritingToEnv,
  buildEnvironment: () => buildEnvironment,
  logConfiguration: () => logConfiguration,
  logProvisioning: () => logProvisioning,
  offerToWriteToEnv: () => offerToWriteToEnv,
  suggestedEnvVarName: () => suggestedEnvVarName,
  writeToEnv: () => writeToEnv
});
module.exports = __toCommonJS(envvars_exports);
var import_chalk = __toESM(require("chalk"));
var dotenv = __toESM(require("dotenv"));
var import_inquirer = __toESM(require("inquirer"));
var import_context = require("./context");
var import_utils = require("./utils");
const FRAMEWORKS = ["create-react-app", "Next.js", "Vite", "Remix"];
async function offerToWriteToEnv(ctx, type, value, saveUrl = "ask") {
  const write = await askAboutWritingToEnv(ctx, type, value, saveUrl);
  await writeToEnv(ctx, write, value);
  if (write) {
    const { envFile, envVar } = write;
    (0, import_context.logFinishedStep)(
      ctx,
      `Saved ${type} deployment URL as ${envVar} to ${envFile}`
    );
  }
}
async function askAboutWritingToEnv(ctx, type, value, saveUrl = "ask") {
  if (saveUrl === "no") {
    return null;
  }
  const { detectedFramework, envVar } = await suggestedEnvVarName(ctx);
  if (detectedFramework === "Remix" && type === "prod") {
    return null;
  }
  const { envFile, existing } = type === "dev" ? suggestedDevEnvFile(ctx, detectedFramework) : suggestedProdEnvFile(ctx);
  if (existing) {
    const config = dotenv.parse(ctx.fs.readUtf8File(envFile));
    const matching = Object.keys(config).filter((key) => EXPECTED_NAMES.has(key));
    if (matching.length > 1) {
      console.error(
        import_chalk.default.yellow(
          `Found multiple CONVEX_URL environment variables in ${envFile} so cannot update automatically.`
        )
      );
      return null;
    }
    if (matching.length === 1) {
      const [envVar2, oldValue] = [matching[0], config[matching[0]]];
      if (oldValue === value) {
        return null;
      }
      if (Object.values(config).filter((v) => v === oldValue).length !== 1) {
        import_chalk.default.yellow(`Can't safely modify ${envFile}, please edit manually.`);
        return null;
      }
      if (saveUrl === "yes" || await promptAboutSaving(type, envVar2, envFile)) {
        return { envFile, type, envVar: envVar2, oldValue };
      }
      return null;
    }
  }
  if (saveUrl === "yes" || await promptAboutSaving(type, envVar, envFile)) {
    return { envFile, type, envVar };
  }
  return null;
}
async function promptAboutSaving(type, envVar, envFile) {
  return (await import_inquirer.default.prompt([
    {
      type: "confirm",
      name: "updateEnvFile",
      message: `Save ${type} deployment URL as ${envVar} to ${envFile}?`,
      default: true
    }
  ])).updateEnvFile;
}
async function writeToEnv(ctx, writeConfig, value) {
  if (!writeConfig) {
    return;
  }
  const { envFile, envVar, oldValue } = writeConfig;
  if (oldValue !== void 0) {
    const modified = ctx.fs.readUtf8File(envFile).replace(oldValue, value);
    ctx.fs.writeUtf8File(envFile, modified);
  } else {
    const doesFileExist = ctx.fs.exists(envFile);
    if (doesFileExist) {
      const orig = ctx.fs.readUtf8File(envFile);
      const modified = `${orig}
${envVar}="${value}"
`;
      ctx.fs.writeUtf8File(envFile, modified);
    } else {
      const contents = `${envVar}="${value}"
`;
      ctx.fs.writeUtf8File(envFile, contents);
    }
  }
}
function logProvisioning(ctx, writeConfig, type, url) {
  if (writeConfig) {
    const { envVar, envFile } = writeConfig;
    (0, import_context.logFinishedStep)(
      ctx,
      `Provisioned ${type} deployment and saved its URL as ${envVar} to ${envFile}`
    );
  } else {
    (0, import_context.logFinishedStep)(
      ctx,
      `Provisioned ${type} deployment at ${import_chalk.default.bold(url)}`
    );
  }
}
function logConfiguration(ctx, writeConfig, type, url) {
  if (writeConfig) {
    const { envVar, envFile } = writeConfig;
    (0, import_context.logFinishedStep)(
      ctx,
      `Configured ${type} deployment and saved its URL as ${envVar} to ${envFile}`
    );
  } else {
    (0, import_context.logFinishedStep)(ctx, `Configured ${type} deployment at ${import_chalk.default.bold(url)}`);
  }
}
async function suggestedEnvVarName(ctx) {
  if (!ctx.fs.exists("package.json")) {
    return {
      envVar: "CONVEX_URL"
    };
  }
  const packages = await (0, import_utils.loadPackageJson)(ctx);
  const isCreateReactApp = "react-scripts" in packages;
  if (isCreateReactApp) {
    return {
      detectedFramework: "create-react-app",
      envVar: "REACT_APP_CONVEX_URL"
    };
  }
  const isNextJs = "next" in packages;
  if (isNextJs) {
    return {
      detectedFramework: "Next.js",
      envVar: "NEXT_PUBLIC_CONVEX_URL"
    };
  }
  const isRemix = "@remix-run/dev" in packages;
  if (isRemix) {
    return {
      detectedFramework: "Remix",
      envVar: "CONVEX_URL"
    };
  }
  const isVite = "vite" in packages;
  if (isVite) {
    return {
      detectedFramework: "Vite",
      envVar: "VITE_CONVEX_URL"
    };
  }
  return {
    envVar: "CONVEX_URL"
  };
}
function suggestedProdEnvFile(ctx) {
  if (ctx.fs.exists(".env.production")) {
    return {
      existing: true,
      envFile: ".env.production"
    };
  }
  if (ctx.fs.exists(".env")) {
    return {
      existing: true,
      envFile: ".env"
    };
  }
  return {
    existing: false,
    envFile: ".env"
  };
}
function suggestedDevEnvFile(ctx, framework) {
  if (ctx.fs.exists(".env.local")) {
    return {
      existing: true,
      envFile: ".env.local"
    };
  }
  if (framework === "Remix") {
    return {
      existing: ctx.fs.exists(".env"),
      envFile: ".env"
    };
  }
  return {
    existing: ctx.fs.exists(".env.local"),
    envFile: ".env.local"
  };
}
const EXPECTED_NAMES = /* @__PURE__ */ new Set([
  "CONVEX_URL",
  "NEXT_PUBLIC_CONVEX_URL",
  "VITE_CONVEX_URL",
  "REACT_APP_CONVEX_URL"
]);
function buildEnvironment() {
  return process.env.VERCEL ? "Vercel" : process.env.NETLIFY ? "Netlify" : false;
}
//# sourceMappingURL=envvars.js.map
