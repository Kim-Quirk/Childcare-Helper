"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ConvexProviderWithClerk_exports = {};
__export(ConvexProviderWithClerk_exports, {
  ConvexProviderWithClerk: () => ConvexProviderWithClerk
});
module.exports = __toCommonJS(ConvexProviderWithClerk_exports);
var import_clerk_react = require("@clerk/clerk-react");
var import_react = __toESM(require("react"));
var import_react2 = require("react");
var import_ConvexAuthState = require("../react/ConvexAuthState.js");
function ConvexProviderWithClerk({
  children,
  client
}) {
  return /* @__PURE__ */ import_react.default.createElement(import_ConvexAuthState.ConvexProviderWithAuth, { client, useAuth: useAuthFromClerk }, children);
}
function useAuthFromClerk() {
  const { isLoaded, isSignedIn, getToken } = (0, import_clerk_react.useAuth)();
  const fetchAccessToken = (0, import_react2.useCallback)(
    async ({ forceRefreshToken }) => {
      try {
        return getToken({ template: "convex", skipCache: forceRefreshToken });
      } catch (error) {
        return null;
      }
    },
    []
  );
  return (0, import_react2.useMemo)(
    () => ({
      isLoading: !isLoaded,
      isAuthenticated: isSignedIn ?? false,
      fetchAccessToken
    }),
    [isLoaded, isSignedIn, fetchAccessToken]
  );
}
//# sourceMappingURL=ConvexProviderWithClerk.js.map
